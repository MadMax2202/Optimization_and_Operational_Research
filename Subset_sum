flag = False #used to check whethat at least one of the subsets with the desired sum is found 
 
def print_subset_sum(i, n, _set, target_sum, subset):
    global flag
    if target_sum == 0: #if the target sum is zero a valid subset is found 
        flag = True #sebset is printed when the flag is true 
        print("[", end=" ")
        for element in subset:
            print(element, end=" ")
        print("]", end=" ")
        return 
 
    if i == n: #if the end of an array is reached the function is returned 
    print_subset_sum(i + 1, n, _set, target_sum, subset) #recursive call
    if _set[i] <= target_sum:
        subset.append(_set[i])
        print_subset_sum(i + 1, n, _set, target_sum - _set[i], subset) #recursive call
        subset.pop()
 
# Driver code
if __name__ == "__main__":
    set_1 = [1, 2, 1]
    sum_1 = 3
    n_1 = len(set_1)
    subset_1 = []
    print("Output 1:")
    print_subset_sum(0, n_1, set_1, sum_1, subset_1)
    print()
    flag = False #test code 1
 
    set_2 = [3, 34, 4, 12, 5, 2]
    sum_2 = 30
    n_2 = len(set_2)
    subset_2 = []
    print("Output 2:")
    print_subset_sum(0, n_2, set_2, sum_2, subset_2)
    if not flag:
        print("There is no such subset") #test code 2 
